name: Repository Management

# This workflow triggers on two main events:
# 1. 'pull_request': To handle automatic merging of PRs.
# 2. 'schedule': To periodically check for inactivity and manage repository visibility.
on:
  pull_request:
    # Trigger this workflow when a pull request is opened, has labels added/removed,
    # is synchronized (new commits pushed to the branch), or is reopened.
    types: [labeled, opened, synchronize, reopened]
  schedule:
    # Run this job once a day at 00:00 UTC.
    # You can adjust the cron schedule as needed (e.g., '0 0 * * MON' for weekly on Monday).
    - cron: '0 0 * * *'

jobs:
  auto-merge-prs:
    # This job is responsible for automatically merging pull requests.
    # It will only run if the event is a pull_request and the PR has the 'auto-merge' label.
    if: github.event_name == 'pull_request' && contains(github.event.pull_request.labels.*.name, 'auto-merge')
    runs-on: ubuntu-latest # Specifies the runner environment.
    permissions:
      # Grant specific permissions to the default GITHUB_TOKEN for this job.
      pull-requests: write # Required for merging pull requests.
      contents: write      # Required for pushing the merged changes back to the repository.
      # Note: 'actions: write' might be useful for interacting with checks, but is typically
      # not strictly necessary for basic automerge functionality.
    steps:
      - name: Checkout Repository Code
        # This action checks out your repository's code, allowing subsequent steps to access it.
        uses: actions/checkout@v4

      - name: Auto-merge Pull Request with 'auto-merge' label
        # This action facilitates automatic merging of PRs.
        # It waits for all required status checks to pass before attempting the merge.
        uses: pascalgn/automerge-action@v0.16.0
        env:
          # The GITHUB_TOKEN is a temporary token provided by GitHub Actions for each workflow run.
          # It has permissions based on the 'permissions' block defined above.
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          # The specific label that, when present on a PR, triggers this auto-merge action.
          merge_labels: auto-merge
          # The merge method to use: 'merge' (creates a merge commit), 'squash' (combines all commits into one),
          # or 'rebase' (replays commits from the PR branch onto the base branch).
          merge_method: squash
          # Optional: A comma-separated list of required status checks that must pass before merging.
          # If left empty, the action respects the branch protection rules configured in your repository.
          # Example: merge_required_statuses: "build, test-suite"
          merge_required_statuses: ""
          # Optional: If true, the action will attempt to update the PR branch with the latest changes
          # from the base branch before trying to merge, which can help resolve conflicts automatically.
          update_branch: true
          # Optional: Labels that, if present on a PR, will prevent auto-merge, even if 'auto-merge' is present.
          do_not_merge_labels: do-not-merge, blocked
          # Optional: Set to 'true' if at least one approving review is required before merging.
          # review_required: true

  manage-repository-visibility:
    # This job is responsible for managing the repository's visibility.
    # It runs daily according to the schedule configured in the 'on:' section.
    if: github.event_name == 'schedule'
    runs-on: ubuntu-latest # Specifies the runner environment.
    # It's good practice to associate jobs that handle sensitive operations with a GitHub Environment.
    # Ensure you have a 'production' environment configured in your repository settings (Settings > Environments).
    environment:
      name: production
    permissions:
      # Grant 'write' permission to the repository scope.
      # While we use a PAT for explicit authorization, this ensures the GITHUB_TOKEN also has broader context.
      repository: write
    steps:
      - name: Setup GitHub CLI
        # This action installs and configures the GitHub CLI on the runner.
        # The GitHub CLI makes it easier to interact with the GitHub API.
        uses: cli/gh-setup@v2
        with:
          version: 'latest' # Use the latest available version of the GitHub CLI.

      - name: Authenticate GitHub CLI with Personal Access Token (PAT)
        # Login to GitHub CLI using the Personal Access Token (PAT).
        # This PAT (REPO_VISIBILITY_PAT) must be stored in your repository's secrets.
        # It requires 'repo' scope permissions to modify repository settings.
        run: echo "${{ secrets.REPO_VISIBILITY_PAT }}" | gh auth login --with-token
        env:
          # Set the GH_TOKEN environment variable, which the 'gh' CLI automatically uses for authentication.
          GH_TOKEN: ${{ secrets.REPO_VISIBILITY_PAT }}

      - name: Get Latest Merged Pull Request Date
        id: get-last-pr # Assigns an ID to this step so its outputs can be referenced by other steps.
        run: |
          # Use GitHub CLI to call the GitHub REST API to fetch pull requests.
          # We're looking for closed PRs, sorted by their last update time in descending order.
          # We fetch up to 100 PRs to increase the likelihood of finding a recently merged one.
          PR_LIST_JSON=$(gh api repos/${{ github.repository }}/pulls \
                          --header 'Accept: application/vnd.github.v3+json' \
                          -F state=closed \
                          -F sort=updated \
                          -F direction=desc \
                          -F per_page=100)

          # Use 'jq' (a lightweight and flexible command-line JSON processor) to parse the JSON response.
          # We filter the list of PRs to find the first one that has a non-null 'merged_at' timestamp.
          # If no merged PRs are found in the fetched list, 'jq' will output "null".
          LAST_MERGED_PR_DATE=$(echo "$PR_LIST_JSON" | jq -r '.[0:] | map(select(.merged_at != null)) | .[0].merged_at')

          # Check if a merged PR date was found.
          if [ "$LAST_MERGED_PR_DATE" = "null" ] || [ -z "$LAST_MERGED_PR_DATE" ]; then
            echo "No recently merged pull requests found within the last 100 closed PRs."
            echo "Assuming a long period of inactivity for the repository."
            # If no merged PRs are found (e.g., repository is brand new or truly very old),
            # set the date to Epoch (January 1, 1970 UTC) to ensure the 6-month inactivity condition is met.
            LAST_MERGED_PR_DATE="1970-01-01T00:00:00Z"
          else
            echo "Successfully retrieved last merged PR date: $LAST_MERGED_PR_DATE"
          fi
          
          # Output the determined last merged PR date so it can be used by the next step.
          echo "last_merged_pr_date=$LAST_MERGED_PR_DATE" >> "$GITHUB_OUTPUT"

      - name: Calculate Inactivity Period and Change Visibility
        run: |
          # Retrieve the last merged PR date from the output of the previous step.
          LAST_MERGED_PR_DATE="${{ steps.get-last-pr.outputs.last_merged_pr_date }}"
          # Get the current UTC date and time.
          CURRENT_DATE=$(date -u '+%Y-%m-%dT%H:%M:%SZ')

          # Convert both dates to Unix timestamps (seconds since January 1, 1970 UTC)
          # This allows for easy and accurate comparison of time differences.
          LAST_MERGED_TIMESTAMP=$(date -d "$LAST_MERGED_PR_DATE" +%s)
          CURRENT_TIMESTAMP=$(date -d "$CURRENT_DATE" +%s)

          # Calculate the time difference between the current date and the last merged PR date, in seconds.
          DIFF_SECONDS=$((CURRENT_TIMESTAMP - LAST_MERGED_TIMESTAMP))
          
          # Define the threshold for 6 months of inactivity in seconds.
          # We use 180 days as an approximation for 6 months (180 days * 24 hours/day * 60 minutes/hour * 60 seconds/minute).
          SIX_MONTHS_IN_SECONDS=$((180 * 24 * 60 * 60))

          echo "Current time (UTC): $CURRENT_DATE (Timestamp: $CURRENT_TIMESTAMP)"
          echo "Last merged PR time (UTC): $LAST_MERGED_PR_DATE (Timestamp: $LAST_MERGED_TIMESTAMP)"
          echo "Calculated time difference: $DIFF_SECONDS seconds."
          echo "Threshold for 6 months inactivity: $SIX_MONTHS_IN_SECONDS seconds."

          # Check if the time difference exceeds the 6-month threshold.
          if (( DIFF_SECONDS > SIX_MONTHS_IN_SECONDS )); then
            echo "Inactivity detected: Last PR was merged more than 6 months ago."
            echo "Proceeding to change repository visibility to private."
            
            # Use GitHub CLI to send a PATCH request to the GitHub API to update repository settings.
            # The 'visibility' field is set to 'private'.
            # This uses the PAT that was authenticated in a previous step.
            gh api --method PATCH -H "Accept: application/vnd.github.v3+json" \
                   "/repos/${{ github.repository }}" \
                   -f visibility=private
            
            echo "Repository visibility successfully changed to private."
          else
            echo "No significant inactivity detected: Last PR merged less than 6 months ago."
            echo "Repository visibility will remain unchanged (public or current setting)."
          fi
